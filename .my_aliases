#!/usr/local/bin/bash

# -r recursive, -n line number -i case insensitive, -s no messages, -I ignore binary, -S follow symlinks
# -o matching only, -h no filename
alias g="egrep -rnisIS --color"
alias gc="egrep -rnsIS --color"
alias vlc="/Applications/VLC.app/Contents/MacOS/VLC "
alias l="ls -l -h --color --group-directories-first  --dereference-command-line-symlink-to-dir --dereference-command-line --dereference"
alias ls="ls -h --color --group-directories-first  --dereference-command-line-symlink-to-dir --dereference-command-line --dereference"
alias vi="/usr/local/bin/vim"
alias bfg="java -jar /usr/local/bin/bfg-1.12.14.jar"
alias work="cd ~/Documents/tan/3A"
alias paintbrush="/Applications/Paintbrush.app/Contents/MacOS/Paintbrush"
alias servecraft="cd ~/Documents/tan/Minecraft; java -Xmx2G -Xms2G -jar minecraft_server.jar nogui"
alias activate="source .venv/bin/activate"
eval $(thefuck --alias)

# umount -f /local/destination
# sshfs -p 22 user@host:/remote/directory /local/destination -oauto_cache,reconnect,defer_permissions,negative_vncache,volname=destination
# ssh-add ~/.ssh/id_rsa

zamzar_up() {
    file="$1"
    format="$2"
    zamzar_job_id=$(
        curl 'https://sandbox.zamzar.com/v1/jobs' \
            -u "$ZAMZAR_API_KEY": \
            -X POST \
            -F "source_file=@${file}" \
            -F "target_format=${format}" | jq -r '.id'
    )
}

zamzar_info() {
    job_id="$1"
    zamzar_target_file_id=$(
        curl "https://sandbox.zamzar.com/v1/jobs/${job_id}" \
            -u "$ZAMZAR_API_KEY": | jq -r '.target_files[0].id'
    )
}

zamzar_down() {
    file_id="$1"
    output="$2"
    curl "https://sandbox.zamzar.com/v1/files/${file_id}/content" \
        -u "$ZAMZAR_API_KEY": \
        -L \
        -J \
        -o "$output"
}

zamzar() {
    if [ -z $1 ] || [ -z $2 ] || [ -z $3 ] || [ -z $4 ]; then
        echo "zamzar file format wait_time output_file"
        return 1
    fi
    file="$1"
    format="$2"
    conversion_time="$3"
    output_file="$4"
    zamzar_up $file $format &&
    sleep $conversion_time &&
    zamzar_info $zamzar_job_id &&
    zamzar_down $zamzar_target_file_id $output_file
}

auto_virtualenv() {
    venv_dir=$(venv_check)
    if [[ -n "$VIRTUAL_ENV" && -z "$venv_dir" ]]; then
        deactivate
    elif [[ -z "$VIRTUAL_ENV" && -n "$venv_dir" ]]; then
        activate="${venv_dir}/.venv/bin/activate"
        source "$activate"
    fi
}

virtualenv_info() {
    if [[ -n "$VIRTUAL_ENV" ]]; then
        parent=$(dirname $VIRTUAL_ENV)
        venv="${parent##*/}"
    else
        venv=''
    fi
    [[ -n "$venv" ]] && echo "($venv) "
}

parse_git_branch() {
    branch=$(git branch 2> /dev/null | sed -e '/^[^*]/d' -e 's/* \(.*\)/(\1)/')
    echo "" ${branch}
}

export PROMPT_COMMAND=auto_virtualenv

PROMPT_DIRTRIM=5
export PS1="\n\[\033[1;32m\]\$(virtualenv_info)\[\033[0m\]\[\033[1;36m\]\w\[\033[0m\]\[\033[1;31m\]\$(parse_git_branch)\[\033[0m\]\[\033[0;34m\]\n~>\[\033[0m\] ";

export VIRTUAL_ENV_DISABLE_PROMPT=1
export PATH="$(brew --prefix coreutils)/libexec/gnubin:$PATH" # CoreUtils
export PATH="/usr/local/mysql/bin/:$PATH"
export PATH="/Users/tanwang/Library/Android/sdk/platform-tools:$PATH" # Android SDK
export PATH="/usr/local/Cellar/ctags/5.8_1/bin:$PATH" # ctags
export PATH="/Applications/MacDown.app/Contents/MacOS:$PATH" # MacDown

cd ~/Documents/tan/3B
